# Define pod deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  # Deployment name
  name: crud-server
spec:
  # Run two pods with the same server and balance the load.
  replicas: 2
  selector:
    matchLabels:
      app: crud-server
  template:
    metadata:
      labels:
        app: crud-server
    spec:
      containers:
        - name: crud-server
          # Name of the image to use
          image: "jose9348/ctf-crud-microservice:1.0"
          ports:
          - containerPort: 80
          # Environmente required by the server
          env:
            # The the domain inside the kubernetes cluster that the DNS resolve to the auth-service cluster IP.
            - name: AUTH_HOST
              value: "http://auth-service.default.svc.cluster.local:81/api/auth"
            # The prefix to use inside the server this prefix must match with the prefix specified in the Ingress or Gateway
            - name: PREFIX
              value: "/api/crud"
            # Set the env vars for the container using the system env vars with the same name to avoid leak secrets in the file
            - name: DB_HOST
              value: "localhost"
            - name: DB_USER
              value: "postgres"
            - name: DB_NAME
              value: "postgres"
            - name: DB_PASSWORD
              value: "postgres"
            - name: DB_SSL
              value: "true"
            - name: PGSSLMODE
              value: require
---
apiVersion: "apps/v1"
kind: Deployment
metadata:
  # Deployment name
  name: auth-server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: auth-server
  template:
    metadata:
      labels:
        app: auth-server
    spec:
      containers:
        - name: auth-server
          image: "jose9348/ctf-auth-microservice:1.0"
          ports:
          - containerPort: 80
          env:
            # The prefix to use inside the server this prefix must match with the prefix specified in the Ingress or Gateway
            - name: PREFIX
              value: "/api/auth"
            # Set the env vars for the container using the system env vars with the same name to avoid leak secrets in the file
            - name: DB_HOST
              value: "localhost"
            - name: DB_USER
              value: "postgres"
            - name: DB_NAME
              value: "postgres"
            - name: DB_PASSWORD
              value: "postgres"
            - name: DB_SSL
              value: "true"
            - name: PGSSLMODE
              value: require
---
# The frontend its a electron app. But you can make it run like traditional web app.
# apiVersion: v1
# kind: Deployment
# metadata:
#   name: web-app
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       app: web-app
#   template:
#     metadata:
#       labels:
#         app: web-app
#     spec:
#       containers:
#         - name: web-app
#           image: jose9348/ctf-web-app
#           ports:
#           - containerPort: 80
#           env:
#             - name: PORT
#               value: 80
#             - name: VITE_AUTH_SERVER_HOST 
#               value: http://tu-host.com/api/auth
#             - name: VITE_CRUD_SERVER_HOST
#               value: http://tu-host.com/api/crud
---
apiVersion: v1
kind: Service
metadata:
  # Service name
  name: crud-service
spec:
  selector:
    # Select the deployment with `crud-server` as name
    app: crud-server
  ports:
    # Expose the port 80 and route the traffic inside the container to the port 80
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---

apiVersion: v1
kind: Service
metadata:
  # Service name
  name: auth-service
spec:
  selector:
    # Select the deployment with `auth-server` as name
    app: auth-server
  ports:
    # Expose the port 81 and route the traffic inside the container to the port 80
    - protocol: TCP
      port: 81
      targetPort: 80
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-ingress
spec:
  ingressClassName: 'nginx'
  rules:
    # If the host is setted is require that every request to the ingress must have the header `Host: ingress.info`
    # - host: ingress.info
    - http:
        paths:
        # External host -> Internal hosts
        # http://ingress.info/api/crud/ok -> http://crud-service.default.svc.cluster.loca/api/crud/ok"
          - path: /api/crud
            pathType: Prefix
            backend:
              service:
                # Map tthe traffic to the service with `crud-service` as name
                name: crud-service
                port:
                  number: 80
        # External host -> Internal hosts
        # http://ingress.info/api/auth/ok -> http://auth-service.default.svc.cluster.loca/api/auth/ok"
          - path: /api/auth
            pathType: Prefix
            backend:
              service:
                # Map tthe traffic to the service with `auth-service` as name
                name: auth-service
                port:
                  number: 81
